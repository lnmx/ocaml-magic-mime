

(* [extension_from_glob glob] *)
let extension_from_glob s =
  if String.length s >= 3 && s.[0] == '*' && s.[1] == '.' then
    if String.contains_from s 2 '*' || String.contains_from s 2 '[' then
      None
    else Some( String.sub s 2 ((String.length s) - 2) )
  else None

let find_extensions db name =
  match Database.get_mime_type db name with
  | None -> []
  | Some( mt ) -> (
    let extns = List.fold_left (fun out gl ->
      match extension_from_glob gl.Mime_type.pattern with
      | None -> out
      | Some( ext ) -> out @ [ ext ]
    ) [] mt.Mime_type.glob in
    extns
  )
  
(* 
 * TODO filter database by manifest
 * TODO sort extensions by weight before codegen
 * *)

let gen_extension_map src_file exec db mf =
  let out_file = open_out src_file in
  Printf.fprintf out_file "(* This file is autogenerated by %s *)\n" exec;
  Printf.fprintf out_file "let map_extension = function\n";
  List.iter (fun e ->
    let extns = find_extensions db e in
    if (List.length extns) > 0 then (
        List.iter (fun v -> Printf.fprintf out_file " | \"%s\"" (String.escaped v)) extns;
      Printf.fprintf out_file " -> Some( \"%s\" )\n" (String.escaped e)
    )
    else ()
  ) (Manifest.entries mf);
  Printf.fprintf out_file " | _ -> None\n";
  flush out_file;
  close_out out_file;
  ()

let () =
  let exec = Sys.argv.(0) in

  if Array.length(Sys.argv) != 4 then
    Printf.printf "usage: %s <mime-info.xml> <manifest.txt> <output.ml>\n" exec
  else ();

  let db_file = Sys.argv.(1) in
  let mf_file = Sys.argv.(2) in
  let src_file = Sys.argv.(3) in

  Printf.printf "read %s\n" db_file;
  let database = Database.load_file db_file in
  Printf.printf "read %d entries from %s\n" (Database.length database) db_file;

  Printf.printf "read %s\n" mf_file;
  let manifest = Manifest.load_file mf_file in
  Printf.printf "read %d entries from %s\n" (Manifest.length manifest) mf_file;

  gen_extension_map src_file exec database manifest; 

  Printf.printf "OK\n"
